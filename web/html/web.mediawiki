= SystemVerilog Development Environment for Eclipse =


SVEditor is an Eclipse-based IDE (Integrated Development Environment) for Verilog and SystemVerilog development. It provides a colorizing editor for SystemVerilog with support for content assist and cross-linking between SystemVerilog files.

[[Image:sv_file_outline.gif]]

== Getting Started ==
For information on installing SVEditor and creating your first project, see the [[Getting_Started|Getting Started]] guide.

== SVEditor Features ==
A cheat sheet of SVEditor's features, and how to access them, can be found in the [[SVEditor_Features|SVEditor Features]] table.

== Staying Up-to-Date ==
SVEditor is on Facebook. Like us on Facebook [http://www.facebook.com/sveditor http://www.facebook.com/sveditor] to stay up-to-date with release info, tutorials, and other information.


== User Guide == 
For information on installing and using SVEditor, see the [[User_Guide|User Guide]].

== Developer Guide ==
For information on setting up a development environment for developing SVEditor, see the [[Developer_Guide|Developer Guide]].

== Multimedia ==
[[Multimedia]]


[[User_Guide]]

SVEditor is most-easily installed via the Eclipse Update Site. Just add the SVEditor Update Site (http://sveditor.sourceforge.net/update) to your Eclipse installation! See the [https://sourceforge.net/projects/sveditor/files/docs/Getting%20Started%20with%20SVEditor%20v1.0.pdf/download Getting Started] guide for more-detailed instructions.

<big>'''MediaWiki has been successfully installed.'''</big>

Consult the [http://meta.wikimedia.org/wiki/Help:Contents User's Guide] for information on using the wiki software.

== Getting started ==
* [http://www.mediawiki.org/wiki/Manual:Configuration_settings Configuration settings list]
* [http://www.mediawiki.org/wiki/Manual:FAQ MediaWiki FAQ]
* [http://lists.wikimedia.org/mailman/listinfo/mediawiki-announce MediaWiki release mailing list]

== Developers ==
[[DevelopersMain:Developer's Documentation]]

== Project Logo ==
Click on the following image to upload a new version of the PNG logo image for your project:

[[Image:MediaWikiSidebarLogo.png]]

= Contributing to SVEditor =

There are many ways to contribute to SVEditor -- independent of whether you know Java.

== Providing SystemVerilog Test Cases ==

SVEditor's SystemVerilog parser is at the heart of the tool, and is continually being improved. Ensuring that the parser correctly handles SystemVerilog language constructs is a critical QA task. Providing SystemVerilog code that can be included in SVEditor's test suite is one important way to contribute to the project.
SystemVerilog (or Verilog) code needs to be distributed under an Open Source license. For example, SVEditor currently uses some projects from the OpenCores.org site.

== Contributing New Features via IdeaTorrent ==

SVEditor uses [https://sourceforge.net/apps/ideatorrent/sveditor/ideatorrent IdeaTorrent] to track feature requests. Contribute features here, vote on already-contributed ideas, etc.

== Creating Content-Assist Templates ==

Content-assist templates provide content assist for implementing a language feature. For example, the Eclipse Java IDE provides a content-assist template for the 'for' construct that prompts the user to fill in the required elements of the 'for' statement.
Developing a content-assist template does not require any Java code -- just knowledge of the SystemVerilog feature and a few textual conventions.

== Filing Bugs ==

Everyone develops SystemVerilog in slightly different ways. When you encounter unexpected behavior in SVEditor, filing a bug ensures that SVEditor will support your method of developing SystemVerilog.

== Specifying New Features ==

Many times, specifying all the details of a new feature is as much work as writing the code to implement that feature. File new feature requests using the 'Feature Requests' tracker.

== Contributing Tests (Java) ==

Certain areas of functionality require many tests that (from a Java perspective) are all nearly identical. The distiguishing characteristic is the SystemVerilog code processed by the test.
Two areas that fit this pattern are:

* Parser tests
* Content Assist tests

== Enhancing SVEditor's Parser ==

The SystemVerilog language is extremely large. Enhancing the portions of the language handled by the parser is a key area of work.
