package net.sf.sveditor.core.parser;

public interface ISVKeywords {
	
	enum KW {
		alias("alias", true),
		ALWAYS("always", false),
		ALWAYS_COMB("always_comb", true),
		ALWAYS_FF("always_ff", true),
		ALWAYS_LATCH("always_latch", true),
		AND("and", false),
		ASSERT("assert", true),
		ASSIGN("assign", false),
		ASSUME("assume", true),
		AUTOMATIC("automatic", false),
		BEFORE("before", true),
		BEGIN("begin", false),
		BIND("bind", true),
		BINS("bins", true),
		BINSOF("binsof", true),
		BIT("bit", true),
		BREAK("break", true),
		BUF("buf", false),
		BUFIF0("bufif0", false),
		BUFIF1("bufif1", false),
		BYTE("byte", true),
		CASE("case", false),
		CASEX("casex", false),
		CASEZ("casez", false),
		CELL("cell", false),
		CHANDLE("chandle", true),
		CLASS("class", true),
		CLOCKING("clocking", true),
		CMOS("cmos", false),
		CONFIG("config", false),
		CONST("const", true),
		CONSTRAINT("constraint", true),
		CONTEXT("context", true),
		CONTINUE("continue", true),
		COVER("cover", true),
		COVERGROUP("covergroup", true),
		COVERPOINT("coverpoint", true),
		CROSS("cross", true),
		DEASSIGN("deassign", false),
		DEFAULT("default", false),
		DEFPARAM("defparam", false),
		DESIGN("design", false),
		DISABLE("disable", false),
		DIST("dist", true),
		DO("do", true),
		EDGE("edge", false),
		ELSE("else", false),
		END("end", false),
		ENDCASE("endcase", false),
		ENDCLASS("endclass", true),
		ENDCLOCKING("endclocking", true),
		ENDCONFIG("endconfig", false),
		ENDFUNCTION("endfunction", false),
		ENDGENERATE("endgenerate", false),
		ENDGROUP("endgroup", true),
		ENDINTERFACE("endinterface", true),
		ENDMODULE("endmodule", false),
		ENDPACKAGE("endpackage", true),
		ENDPRIMITIVE("endprimitive", false),
		ENDPROGRAM("endprogram", true),
		ENDPROPERTY("endproperty", true),
		ENDSPECIFY("endspecify", false),
		ENDSEQUENCE("endsequence", true),
		ENDTABLE("endtable", false),
		ENDTASK("endtask", false),
		ENUM("enum", true),
		EVENT("event", false),
		EXPECT("expect", true),
		EXPORT("export", true),
		EXTENDS("extends", true),
		EXTERN("extern", true),
		FINAL("final", true),
		FIRST_MATCH("first_match", true),
		FOR("for", false),
		FORCE("force", false),
		FOREACH("foreach", true),
		FOREVER("forever", false),
		FORK("fork", false),
		FORKJOIN("forkjoin", true),
		FUNCTION("function", false),
		GENERATE("generate", false),
		GENVAR("genvar", false),
		GLOBAL("global", true),
		HIGHZ0("highz0", false),
		HIGHZ1("highz1", false),
		IF("if", false),
		IFF("iff", true),
		IFNONE("ifnone", false),
		IGNORE_BINS("ignore_bins", true),
		ILLEGAL_BINS("illegal_bins", true),
		IMPORT("import", true),
		IMPLIES("implies", true),
		INCDIR("incdir", false),
		INCLUDE("include", false),
		INITIAL("initial", false),
		INOUT("inout", false),
		INPUT("input", false),
		INSIDE("inside", true),
		INSTANCE("instance", false),
		INT("int", true),
		INTEGER("integer", false),
		INTERFACE("interface", true),
		INTERSECT("intersect", true),
		JOIN("join", false),
		JOIN_ANY("join_any", true),
		JOIN_NONE("join_none", true),
		LARGE("large", false),
		LIBLIST("liblist", false),
		LIBRARY("library", false),
		LOCAL("local", true),
		LOCALPARAM("localparam", false),
		LOGIC("logic", true),
		LONGINT("longint", true),
		MACROMODULE("macromodule", false),
		MATCHES("matches", true),
		MEDIUM("medium", false),
		MODPORT("modport", true),
		MODULE("module", false),
		NAND("nand", false),
		NEGEDGE("negedge", false),
		NEW("new", true),
		NMOS("nmos", false),
		NOR("nor", false),
		NOSHOWCANCELLED("noshowcancelled", false),
		NOT("not", false),
		NOTIF0("notif0", false),
		NOTIF1("notif1", false),
		NULL("null", true),
		OR("or", false),
		OUTPUT("output", false),
		PACKAGE("package", true),
		PACKED("packed", true),
		PARAMETER("parameter", false),
		PMOS("pmos", false),
		POSEDGE("posedge", false),
		PRIMITIVE("primitive", false),
		PRIORITY("priority", true),
		PROGRAM("program", true),
		PROPERTY("property", true),
		PROTECTED("protected", true),
		PULL0("pull0", false),
		PULL1("pull1", false),
		PULLDOWN("pulldown", false),
		PULLUP("pullup", false),
		PULSESTYLE_ONEVENT("pulsestyle_onevent", false),
		PULSESTYLE_ONDETECT("pulsestyle_ondetect", false),
		PURE("pure", true),
		RAND("rand", true),
		RANDC("randc", true),
		RANDCASE("randcase", true),
		RANDSEQUENCE("randsequence", true),
		RCMOS("rcmos", false),
		REAL("real", false),
		REALTIME("realtime", false),
		REF("ref", true),
		REG("reg", false),
		RELEASE("release", false),
		REPEAT("repeat", false),
		RESTRICT("restrict", true),
		RETURN("return", true),
		RNMOS("rnmos", false),
		RPMOS("rpmos", false),
		RTRAN("rtran", false),
		RTRANIF0("rtranif0", false),
		RTRANIF1("rtranif1", false),
		S_UNTIL("s_until", true),
		S_UNTIL_WITH("s_until_with", true),
		SCALARED("scalared", false),
		SEQUENCE("sequence", true),
		SHORTINT("shortint", true),
		SHORTREAL("shortreal", true),
		SHOWCANCELLED("showcancelled", false),
		SIGNED("signed", false),
		SMALL("small", false),
		SOFT("soft", false), // isn't this a SV keyword?
		SOLVE("solve", true),
		SPECIFY("specify", false),
		SPECPARAM("specparam", false),
		STATIC("static", true),
		STRING("string", true),
		STRONG("strong", true),
		STRONG0("strong0", false),
		STRONG1("strong1", false),
		STRUCT("struct", true),
		SUPER("super", true),
		SUPPLY0("supply0", false),
		SUPPLY1("supply1", false),
		TABLE("table", false),
		TAGGED("tagged", true),
		TASK("task", false),
		THIS("this", true),
		THROUGHOUT("throughout", true),
		TIME("time", false),
		TIMEPRECISION("timeprecision", true),
		TIMEUNIT("timeunit", true),
		TRAN("tran", false),
		TRANIF0("tranif0", false),
		TRANIF1("tranif1", false),
		TRI("tri", false),
		TRI0("tri0", false),
		TRI1("tri1", false),
		TRIAND("triand", false),
		TRIOR("trior", false),
		TRIREG("trireg", false),
		TYPE("type", true),
		TYPEDEF("typedef", true),
		UNION("union", true),
		UNIQUE("unique", true),
		UNIQUE0("unique0", true),
		UNSIGNED("unsigned", false),
		USE("use", false),
		UNTIL("until", true),
		UNTIL_WITH("until_with", true),
		UNTYPED("untyped", true),
		UWIRE("uwire", false),
		VAR("var", true),
		VECTORED("vectored", false),
		VIRTUAL("virtual", true),
		VOID("void", true),
		WAIT("wait", false),
		WAIT_ORDER("wait_order", true),
		WAND("wand", false),
		WEAK("weak", true),
		WEAK0("weak0", false),
		WEAK1("weak1", false),
		WHILE("while", false),
		WILDCARD("wildcard", true),
		WIRE("wire", false),
		WITH("with", true),
		WITHIN("within", true),
		WOR("wor", false),
		XNOR("xnor", false),
		XOR("xor", false),
		
		// defacto-reserved words
		ONE_STEP("1step", true);
		
		private String 		fImg;
		private boolean		fSV;
		
		KW(String img, boolean sv) {
			fImg = img;
			fSV = sv;
		}
		
		public boolean isSV() { return fSV; }
		public String getImg() { return fImg; }
	}

}
