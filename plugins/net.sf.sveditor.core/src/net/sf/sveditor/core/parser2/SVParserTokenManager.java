/* Generated By:JavaCC: Do not edit this line. SVParserTokenManager.java */
package net.sf.sveditor.core.parser2;

/** Token Manager. */
public class SVParserTokenManager implements SVParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2, long active3, long active4, long active5)
{
   switch (pos)
   {
      case 0:
         if ((active4 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 239;
            return -1;
         }
         if ((active4 & 0x8L) != 0L || (active5 & 0x30000000000000L) != 0L)
            return 1;
         if ((active0 & 0xffffffffffffffc0L) != 0L || (active1 & 0xffffffffffffffffL) != 0L || (active2 & 0xffffffffffffffffL) != 0L || (active3 & 0x7fffffffffL) != 0L || (active4 & 0x3ff60000000000L) != 0L || (active5 & 0x3fee0007f0000L) != 0L)
         {
            jjmatchedKind = 233;
            return 9;
         }
         if ((active4 & 0x7fc0000000L) != 0L)
         {
            jjmatchedKind = 238;
            return -1;
         }
         return -1;
      case 1:
         if ((active5 & 0x30000000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 232;
               jjmatchedPos = 1;
            }
            return 1;
         }
         if ((active0 & 0xfffbffffffffffc0L) != 0L || (active1 & 0xffffffffe3ffffffL) != 0L || (active2 & 0xffffffffffffffdfL) != 0L || (active3 & 0x7fffffffffL) != 0L || (active5 & 0x7e0000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 233;
               jjmatchedPos = 1;
            }
            return 9;
         }
         if ((active4 & 0x3fc0000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 238;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x4000000000000L) != 0L || (active1 & 0x1c000000L) != 0L || (active2 & 0x20L) != 0L)
            return 9;
         return -1;
      case 2:
         if ((active5 & 0x30000000000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 232;
               jjmatchedPos = 2;
            }
            return 1;
         }
         if ((active4 & 0x3fc0000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 238;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x1bfffffc5ff7c0L) != 0L || (active1 & 0xaffff87ff3e07f80L) != 0L || (active2 & 0xfffffffe7fffffd8L) != 0L || (active3 & 0x6bffebf03fL) != 0L || (active5 & 0x400000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 233;
               jjmatchedPos = 2;
            }
            return 9;
         }
         if ((active0 & 0xffe0000003a00800L) != 0L || (active1 & 0x50000780081f807fL) != 0L || (active2 & 0x180000007L) != 0L || (active3 & 0x1400140fc0L) != 0L)
            return 9;
         return -1;
      case 3:
         if ((active5 & 0x30000000000000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 232;
               jjmatchedPos = 3;
            }
            return 1;
         }
         if ((active0 & 0xffc1fffb8343f7c0L) != 0L || (active1 & 0x8bffc77ff3e77f7fL) != 0L || (active2 & 0x9ffffffe107ffbd6L) != 0L || (active3 & 0x20786b8e00L) != 0L || (active5 & 0x400000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 233;
               jjmatchedPos = 3;
            }
            return 9;
         }
         if ((active4 & 0x3fc0000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 238;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x1a00047c1c0000L) != 0L || (active1 & 0x2400380000180080L) != 0L || (active2 & 0x600000006f800408L) != 0L || (active3 & 0x4b878071bfL) != 0L)
            return 9;
         return -1;
      case 4:
         if ((active0 & 0xffc1f0ca8311f780L) != 0L || (active1 & 0x8bf1b767f3f65e7fL) != 0L || (active2 & 0x96fe7e0e4879fbd6L) != 0L || (active3 & 0x6242636a36L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 233;
               jjmatchedPos = 4;
            }
            return 9;
         }
         if ((active5 & 0x30000000000000L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 232;
               jjmatchedPos = 4;
            }
            return 1;
         }
         if ((active0 & 0xf3130420040L) != 0L || (active1 & 0xe401800012100L) != 0L || (active2 & 0x90181f016060000L) != 0L || (active3 & 0x38088400L) != 0L)
            return 9;
         return -1;
      case 5:
         if ((active0 & 0xffc176e280008000L) != 0L || (active1 & 0x8975b7466076487fL) != 0L || (active2 & 0x86663f824c69fa80L) != 0L || (active3 & 0x6042626036L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 233;
               jjmatchedPos = 5;
            }
            return 9;
         }
         if ((active0 & 0x800803117780L) != 0L || (active1 & 0x280002193801600L) != 0L || (active2 & 0x1098400c00100156L) != 0L || (active3 & 0x200010a00L) != 0L)
            return 9;
         return -1;
      case 6:
         if ((active0 & 0xff8056a200008700L) != 0L || (active1 & 0x802436406070403fL) != 0L || (active2 & 0x80043f804c69b200L) != 0L || (active3 & 0x6042222006L) != 0L)
         {
            jjmatchedKind = 233;
            jjmatchedPos = 6;
            return 9;
         }
         if ((active0 & 0x41204080000000L) != 0L || (active1 & 0x951810600060840L) != 0L || (active2 & 0x662000200004880L) != 0L || (active3 & 0x404030L) != 0L)
            return 9;
         return -1;
      case 7:
         if ((active0 & 0xef00062000008700L) != 0L || (active1 & 0x802426006000401fL) != 0L || (active2 & 0x8004300008611200L) != 0L || (active3 & 0x6002002002L) != 0L)
         {
            jjmatchedKind = 233;
            jjmatchedPos = 7;
            return 9;
         }
         if ((active0 & 0x1080508200000000L) != 0L || (active1 & 0x104000700020L) != 0L || (active2 & 0xf804408a000L) != 0L || (active3 & 0x40220004L) != 0L)
            return 9;
         return -1;
      case 8:
         if ((active0 & 0xad00062000000500L) != 0L || (active1 & 0x802400006000401fL) != 0L || (active2 & 0x8000200008600000L) != 0L || (active3 & 0x2002002002L) != 0L)
         {
            jjmatchedKind = 233;
            jjmatchedPos = 8;
            return 9;
         }
         if ((active0 & 0x4200000000008200L) != 0L || (active1 & 0x260000000000L) != 0L || (active2 & 0x4100000011200L) != 0L || (active3 & 0x4000000000L) != 0L)
            return 9;
         return -1;
      case 9:
         if ((active0 & 0x2d00000000000500L) != 0L || (active1 & 0x8020000060004015L) != 0L || (active2 & 0x200008600000L) != 0L || (active3 & 0x2002L) != 0L)
         {
            jjmatchedKind = 233;
            jjmatchedPos = 9;
            return 9;
         }
         if ((active3 & 0x2000000000L) != 0L)
            return 7;
         if ((active0 & 0x8000062000000000L) != 0L || (active1 & 0x400000000000aL) != 0L || (active2 & 0x8000000000000000L) != 0L || (active3 & 0x2000000L) != 0L)
            return 9;
         return -1;
      case 10:
         if ((active0 & 0x2000000000000400L) != 0L || (active1 & 0x8000000040000001L) != 0L || (active2 & 0x200008600000L) != 0L || (active3 & 0x2L) != 0L)
         {
            jjmatchedKind = 233;
            jjmatchedPos = 10;
            return 9;
         }
         if ((active0 & 0xd00000000000100L) != 0L || (active1 & 0x20000020004014L) != 0L || (active3 & 0x2000L) != 0L)
            return 9;
         return -1;
      case 11:
         if ((active1 & 0x8000000000000000L) != 0L || (active2 & 0x200000600000L) != 0L || (active3 & 0x2L) != 0L)
         {
            jjmatchedKind = 233;
            jjmatchedPos = 11;
            return 9;
         }
         if ((active0 & 0x2000000000000400L) != 0L || (active1 & 0x40000001L) != 0L || (active2 & 0x8000000L) != 0L)
            return 9;
         return -1;
      case 12:
         if ((active1 & 0x8000000000000000L) != 0L || (active2 & 0x600000L) != 0L)
         {
            jjmatchedKind = 233;
            jjmatchedPos = 12;
            return 9;
         }
         if ((active2 & 0x200000000000L) != 0L || (active3 & 0x2L) != 0L)
            return 9;
         return -1;
      case 13:
         if ((active1 & 0x8000000000000000L) != 0L || (active2 & 0x600000L) != 0L)
         {
            jjmatchedKind = 233;
            jjmatchedPos = 13;
            return 9;
         }
         return -1;
      case 14:
         if ((active2 & 0x600000L) != 0L)
         {
            jjmatchedKind = 233;
            jjmatchedPos = 14;
            return 9;
         }
         if ((active1 & 0x8000000000000000L) != 0L)
            return 9;
         return -1;
      case 15:
         if ((active2 & 0x600000L) != 0L)
         {
            jjmatchedKind = 233;
            jjmatchedPos = 15;
            return 9;
         }
         return -1;
      case 16:
         if ((active2 & 0x600000L) != 0L)
         {
            jjmatchedKind = 233;
            jjmatchedPos = 16;
            return 9;
         }
         return -1;
      case 17:
         if ((active2 & 0x400000L) != 0L)
         {
            jjmatchedKind = 233;
            jjmatchedPos = 17;
            return 9;
         }
         if ((active2 & 0x200000L) != 0L)
            return 9;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2, long active3, long active4, long active5)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2, active3, active4, active5), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 283;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x4000L, 0x280000000L);
      case 34:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x30L, 0x0L);
      case 35:
         jjmatchedKind = 246;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x200000L, 0x0L);
      case 36:
         jjmatchedKind = 259;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x30000000000000L);
      case 37:
         jjmatchedKind = 268;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x400000000000000L, 0x0L);
      case 38:
         jjmatchedKind = 344;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x800000010000000L, 0x40L);
      case 39:
         jjmatchedKind = 329;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0xc000000000100L);
      case 40:
         jjmatchedKind = 243;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x80000000000L, 0x0L, 0x0L);
      case 41:
         return jjStopAtPos(0, 245);
      case 42:
         jjmatchedKind = 256;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x100000000000L, 0x100000000000400L, 0x800L);
      case 43:
         jjmatchedKind = 262;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x40000000000080L, 0x4000L);
      case 44:
         return jjStopAtPos(0, 247);
      case 45:
         jjmatchedKind = 296;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x80000000000000L, 0x1000008030L);
      case 46:
         jjmatchedKind = 248;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x10000000000000L, 0x0L, 0x0L);
      case 47:
         jjmatchedKind = 267;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x200000000000000L, 0x0L);
      case 48:
         return jjStopAtPos(0, 239);
      case 49:
         jjmatchedKind = 238;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x3fc0000000L, 0x0L);
      case 58:
         jjmatchedKind = 242;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0xe000000000000000L, 0x0L, 0x0L);
      case 59:
         return jjStopAtPos(0, 231);
      case 60:
         jjmatchedKind = 271;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x4000000000010000L, 0x800002001L);
      case 61:
         jjmatchedKind = 251;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x4002000L, 0x140000000L);
      case 62:
         jjmatchedKind = 273;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x8000000000040000L, 0x400001002L);
      case 63:
         return jjStopAtPos(0, 299);
      case 64:
         jjmatchedKind = 322;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x2000000L, 0x8L);
      case 66:
         return jjStartNfaWithStates_0(0, 233, 9);
      case 68:
         return jjStartNfaWithStates_0(0, 233, 9);
      case 69:
         return jjStartNfaWithStates_0(0, 233, 9);
      case 70:
         return jjStartNfaWithStates_0(0, 233, 9);
      case 72:
         return jjStartNfaWithStates_0(0, 233, 9);
      case 78:
         return jjStartNfaWithStates_0(0, 233, 9);
      case 79:
         return jjStartNfaWithStates_0(0, 233, 9);
      case 80:
         jjmatchedKind = 233;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x2000000000L, 0x0L, 0x0L);
      case 82:
         return jjStartNfaWithStates_0(0, 233, 9);
      case 83:
         return jjStartNfaWithStates_0(0, 233, 9);
      case 88:
         return jjStartNfaWithStates_0(0, 233, 9);
      case 90:
         return jjStartNfaWithStates_0(0, 233, 9);
      case 91:
         jjmatchedKind = 257;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x1c00000L, 0x0L);
      case 92:
         return jjStopAtPos(0, 237);
      case 93:
         return jjStopAtPos(0, 258);
      case 94:
         jjmatchedKind = 347;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x2000000000000000L, 0x20000000L);
      case 95:
         return jjStartNfaWithStates_0(0, 233, 9);
      case 97:
         return jjMoveStringLiteralDfa1_0(0xffc0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 98:
         jjmatchedKind = 233;
         return jjMoveStringLiteralDfa1_0(0x7ff0000L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0xffff8000000L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 100:
         jjmatchedKind = 233;
         return jjMoveStringLiteralDfa1_0(0x7f00000000000L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 101:
         jjmatchedKind = 233;
         return jjMoveStringLiteralDfa1_0(0xfff8000000000000L, 0x1fffL, 0x0L, 0x0L, 0x0L, 0x0L);
      case 102:
         jjmatchedKind = 233;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3fe000L, 0x0L, 0x0L, 0x0L, 0x200000L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xc00000L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 104:
         jjmatchedKind = 233;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3000000L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x7fffc000000L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 106:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x380000000000L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1fc00000000000L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3e0000000000000L, 0x0L, 0x0L, 0x0L, 0x20000L);
      case 110:
         jjmatchedKind = 233;
         return jjMoveStringLiteralDfa1_0(0x0L, 0xfc00000000000000L, 0xfL, 0x0L, 0x0L, 0x80000L);
      case 111:
         jjmatchedKind = 233;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x70L, 0x0L, 0x0L, 0x0L);
      case 112:
         jjmatchedKind = 233;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0xffff80L, 0x0L, 0x0L, 0x100000L);
      case 114:
         jjmatchedKind = 233;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1ffff000000L, 0x4000000000L, 0x0L, 0x0L);
      case 115:
         jjmatchedKind = 233;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x7fffe0000000000L, 0x0L, 0x0L, 0x400000L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0xf800000000000000L, 0x7fffL, 0x0L, 0x0L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0xf8000L, 0x0L, 0x40000L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0xf00000L, 0x0L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x7ff000000L, 0x0L, 0x0L);
      case 120:
         jjmatchedKind = 233;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x1800000000L, 0x0L, 0x0L);
      case 122:
         return jjStartNfaWithStates_0(0, 233, 9);
      case 123:
         return jjStopAtPos(0, 249);
      case 124:
         jjmatchedKind = 330;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x1000000020180000L, 0x0L);
      case 125:
         return jjStopAtPos(0, 250);
      case 126:
         jjmatchedKind = 343;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x16000000L);
      case 8211:
         jjmatchedKind = 264;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x1000000000000000L, 0x200L, 0x0L);
      case 8217:
         jjmatchedKind = 360;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x80L);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2, long active3, long active4, long active5)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2, active3, active4, active5);
      return 1;
   }
   switch(curChar)
   {
      case 35:
         if ((active4 & 0x200000L) != 0L)
            return jjStopAtPos(1, 277);
         break;
      case 38:
         if ((active4 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 284;
            jjmatchedPos = 1;
         }
         else if ((active5 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 345);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x40L);
      case 41:
         if ((active3 & 0x100000000000L) != 0L)
            return jjStopAtPos(1, 236);
         break;
      case 42:
         if ((active3 & 0x80000000000L) != 0L)
            return jjStopAtPos(1, 235);
         else if ((active3 & 0x10000000000000L) != 0L)
            return jjStopAtPos(1, 244);
         else if ((active4 & 0x400L) != 0L)
            return jjStopAtPos(1, 266);
         else if ((active4 & 0x400000L) != 0L)
            return jjStopAtPos(1, 278);
         else if ((active5 & 0x8L) != 0L)
            return jjStopAtPos(1, 323);
         break;
      case 43:
         if ((active4 & 0x80L) != 0L)
            return jjStopAtPos(1, 263);
         break;
      case 45:
         if ((active5 & 0x1000000000L) != 0L)
            return jjStopAtPos(1, 356);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x1080000L, active5, 0L);
      case 47:
         if ((active3 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(1, 254);
         break;
      case 48:
         if ((active5 & 0x4000000000000L) != 0L)
            return jjStopAtPos(1, 370);
         break;
      case 49:
         if ((active5 & 0x8000000000000L) != 0L)
            return jjStopAtPos(1, 371);
         break;
      case 58:
         if ((active3 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(1, 255);
         else if ((active5 & 0x4000L) != 0L)
            return jjStopAtPos(1, 334);
         else if ((active5 & 0x8000L) != 0L)
            return jjStopAtPos(1, 335);
         break;
      case 60:
         if ((active5 & 0x2000L) != 0L)
         {
            jjmatchedKind = 333;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x4000000000000000L, active5, 0x800000001L);
      case 61:
         if ((active3 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(1, 253);
         else if ((active4 & 0x2000L) != 0L)
         {
            jjmatchedKind = 269;
            jjmatchedPos = 1;
         }
         else if ((active4 & 0x4000L) != 0L)
         {
            jjmatchedKind = 270;
            jjmatchedPos = 1;
         }
         else if ((active4 & 0x10000L) != 0L)
            return jjStopAtPos(1, 272);
         else if ((active4 & 0x40000L) != 0L)
            return jjStopAtPos(1, 274);
         else if ((active4 & 0x800000L) != 0L)
            return jjStopAtPos(1, 279);
         else if ((active4 & 0x40000000000000L) != 0L)
            return jjStopAtPos(1, 310);
         else if ((active4 & 0x80000000000000L) != 0L)
            return jjStopAtPos(1, 311);
         else if ((active4 & 0x100000000000000L) != 0L)
            return jjStopAtPos(1, 312);
         else if ((active4 & 0x200000000000000L) != 0L)
            return jjStopAtPos(1, 313);
         else if ((active4 & 0x400000000000000L) != 0L)
            return jjStopAtPos(1, 314);
         else if ((active4 & 0x800000000000000L) != 0L)
            return jjStopAtPos(1, 315);
         else if ((active4 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 316;
            jjmatchedPos = 1;
         }
         else if ((active4 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(1, 317);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x100000L, active5, 0x3c0000000L);
      case 62:
         if ((active3 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(1, 252);
         else if ((active4 & 0x4000000L) != 0L)
            return jjStopAtPos(1, 282);
         else if ((active5 & 0x10L) != 0L)
         {
            jjmatchedKind = 324;
            jjmatchedPos = 1;
         }
         else if ((active5 & 0x800L) != 0L)
            return jjStopAtPos(1, 331);
         else if ((active5 & 0x1000L) != 0L)
         {
            jjmatchedKind = 332;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x8000000000000000L, active5, 0x400000022L);
      case 64:
         if ((active4 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 281);
         break;
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x2000000000L, active4, 0L, active5, 0L);
      case 68:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x30L, active5, 0L);
      case 94:
         if ((active5 & 0x10000000L) != 0L)
            return jjStopAtPos(1, 348);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x38000000L, active1, 0x460400000000000L, active2, 0x380000000f000380L, active3, 0x4007100000L, active4, 0L, active5, 0L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x20010000000L, active3, 0L, active4, 0L, active5, 0L);
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0xf00040030000L, active1, 0x1880000000c00000L, active2, 0x40fe0000000L, active3, 0x18200000L, active4, 0L, active5, 0L);
      case 102:
         if ((active1 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x18000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 103:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x20000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000L, active1, 0L, active2, 0xc000380000000000L, active3, 0x20000000L, active4, 0L, active5, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x30000003c0000L, active1, 0x1800003006000L, active2, 0x400000000000L, active3, 0x3c0400007L, active4, 0L, active5, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x100003000007c0L, active1, 0x40000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000L, active1, 0x2000000080000000L, active2, 0x800000000400L, active3, 0L, active4, 0L, active5, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0xffe0000000000800L, active1, 0x7ff000000ffL, active2, 0x1000000000L, active3, 0x800038000L, active4, 0L, active5, 0L);
      case 111:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 50, 9);
         return jjMoveStringLiteralDfa2_0(active0, 0x7f800000000L, active1, 0xc31e3800001f8000L, active2, 0x1000000000807L, active3, 0x1400800000L, active4, 0L, active5, 0L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x6002000000010L, active3, 0L, active4, 0L, active5, 0L);
      case 114:
         if ((active2 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(1, 133, 9);
         return jjMoveStringLiteralDfa2_0(active0, 0x80000400000L, active1, 0L, active2, 0x1f000L, active3, 0xff8L, active4, 0L, active5, 0x10000000000000L);
      case 115:
         if ((active5 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(1, 233, 9);
         else if ((active5 & 0x40000L) != 0L)
         {
            jjmatchedKind = 233;
            jjmatchedPos = 1;
         }
         else if ((active5 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(1, 233, 9);
         else if ((active5 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(1, 233, 9);
         else if ((active5 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(1, 233, 9);
         return jjMoveStringLiteralDfa2_0(active0, 0x7000L, active1, 0L, active2, 0L, active3, 0x40000L, active4, 0L, active5, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0xf801c000000000L, active3, 0L, active4, 0L, active5, 0x400000L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x3808000L, active1, 0x200000L, active2, 0x700000000fe0048L, active3, 0L, active4, 0L, active5, 0x20000000000000L);
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x100L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x80000L, active4, 0L, active5, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1e00L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000L, active1, 0L, active2, 0L, active3, 0x7000L, active4, 0L, active5, 0L);
      case 123:
         if ((active5 & 0x80L) != 0L)
            return jjStopAtPos(1, 327);
         else if ((active5 & 0x100L) != 0L)
            return jjStopAtPos(1, 328);
         break;
      case 124:
         if ((active4 & 0x20000000L) != 0L)
            return jjStopAtPos(1, 285);
         else if ((active5 & 0x4000000L) != 0L)
            return jjStopAtPos(1, 346);
         break;
      case 126:
         if ((active5 & 0x20000000L) != 0L)
            return jjStopAtPos(1, 349);
         break;
      case 8211:
         if ((active4 & 0x200L) != 0L)
            return jjStopAtPos(1, 265);
         break;
      case 8217:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x3fc0000000L, active5, 0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2, active3, active4, active5);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2, old3, old4, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2, active3, active4, active5);
      return 2;
   }
   switch(curChar)
   {
      case 38:
         if ((active5 & 0x40L) != 0L)
            return jjStopAtPos(2, 326);
         break;
      case 60:
         if ((active5 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 355;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x1L);
      case 61:
         if ((active4 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(2, 318);
         else if ((active4 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(2, 319);
         else if ((active5 & 0x40000000L) != 0L)
            return jjStopAtPos(2, 350);
         else if ((active5 & 0x80000000L) != 0L)
            return jjStopAtPos(2, 351);
         break;
      case 62:
         if ((active4 & 0x80000L) != 0L)
            return jjStopAtPos(2, 275);
         else if ((active4 & 0x100000L) != 0L)
            return jjStopAtPos(2, 276);
         else if ((active4 & 0x1000000L) != 0L)
            return jjStopAtPos(2, 280);
         else if ((active5 & 0x20L) != 0L)
            return jjStopAtPos(2, 325);
         else if ((active5 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 354;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x2L);
      case 63:
         if ((active5 & 0x100000000L) != 0L)
            return jjStopAtPos(2, 352);
         else if ((active5 & 0x200000000L) != 0L)
            return jjStopAtPos(2, 353);
         break;
      case 66:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x3c00000000L, active5, 0L);
      case 80:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x30L, active5, 0L);
      case 84:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x2000000000L, active4, 0L, active5, 0L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x100180000000L, active1, 0L, active2, 0x8820060000000L, active3, 0x18000038L, active4, 0L, active5, 0L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1800000000000L, active2, 0x800000000000000L, active3, 0L, active4, 0x3c0000000L, active5, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x26000300000000L, active2, 0x180L, active3, 0x200000L, active4, 0L, active5, 0L);
      case 100:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(2, 11, 9);
         else if ((active0 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0xffc0000000000000L, active1, 0x38000000000007fL, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 101:
         if ((active3 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(2, 210, 9);
         return jjMoveStringLiteralDfa3_0(active0, 0x400000L, active1, 0x100L, active2, 0x6000000000000L, active3, 0L, active4, 0L, active5, 0x400000L);
      case 102:
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(2, 91, 9);
         else if ((active2 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(2, 159, 9);
         return jjMoveStringLiteralDfa3_0(active0, 0x600003010000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 103:
         if ((active2 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(2, 160, 9);
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000020000L, active1, 0x808000003000000L, active2, 0x1000400000000000L, active3, 0L, active4, 0L, active5, 0L);
      case 105:
         if ((active3 & 0x40L) != 0L)
         {
            jjmatchedKind = 198;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x40L, active1, 0x380400000000L, active2, 0x4000000000003000L, active3, 0x23898f80L, active4, 0L, active5, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000L, active1, 0x40000000L, active2, 0x10002007e0008L, active3, 0x40000000L, active4, 0L, active5, 0L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x3010000000L, active3, 0x7L, active4, 0L, active5, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0xf8001c0000L, active1, 0x410000030e02000L, active2, 0xf000000L, active3, 0x4004000000L, active4, 0L, active5, 0x20000000000000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x80600000000L, active1, 0x2000000800000000L, active2, 0x38000001c400L, active3, 0x800000000L, active4, 0L, active5, 0x10000000000000L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1080000600L, active2, 0x700000400000000L, active3, 0x7000L, active4, 0L, active5, 0L);
      case 113:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x40000000000L, active3, 0L, active4, 0L, active5, 0L);
      case 114:
         if ((active1 & 0x8000L) != 0L)
         {
            jjmatchedKind = 79;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 126, 9);
         else if ((active3 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(2, 212, 9);
         else if ((active3 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(2, 226, 9);
         else if ((active3 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 228, 9);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4000001f4000L, active2, 0x80f001c000800200L, active3, 0x80400000L, active4, 0L, active5, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x13800038007000L, active1, 0x8000006000000000L, active2, 0x2000000000000800L, active3, 0x20000L, active4, 0L, active5, 0L);
      case 116:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(2, 21, 9);
         else if ((active1 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x1L) != 0L)
         {
            jjmatchedKind = 128;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x4008000L, active1, 0x40070000001800L, active2, 0x800000056L, active3, 0x300000000L, active4, 0L, active5, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x80L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0x70000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 119:
         if ((active1 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 124, 9);
         return jjMoveStringLiteralDfa3_0(active0, 0x780L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2, active3, active4, active5);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2, old3, old4, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2, active3, active4, active5);
      return 3;
   }
   switch(curChar)
   {
      case 48:
         if ((active3 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(3, 199, 9);
         else if ((active4 & 0x40000000L) != 0L)
            return jjStopAtPos(3, 286);
         else if ((active4 & 0x400000000L) != 0L)
            return jjStopAtPos(3, 290);
         break;
      case 49:
         if ((active3 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(3, 200, 9);
         else if ((active4 & 0x80000000L) != 0L)
            return jjStopAtPos(3, 287);
         else if ((active4 & 0x800000000L) != 0L)
            return jjStopAtPos(3, 291);
         break;
      case 61:
         if ((active5 & 0x1L) != 0L)
            return jjStopAtPos(3, 320);
         else if ((active5 & 0x2L) != 0L)
            return jjStopAtPos(3, 321);
         break;
      case 72:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x2000000000L, active4, 0L, active5, 0L);
      case 73:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x30L, active5, 0L);
      case 88:
         if ((active4 & 0x200000000L) != 0L)
            return jjStopAtPos(3, 289);
         else if ((active4 & 0x2000000000L) != 0L)
            return jjStopAtPos(3, 293);
         break;
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x12000004007c0L, active1, 0x6000000002000L, active2, 0x1c000000200L, active3, 0x200L, active4, 0L, active5, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x3c0000200000000L, active1, 0x40000000210000L, active2, 0x6000000000000L, active3, 0L, active4, 0L, active5, 0L);
      case 100:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(3, 18, 9);
         else if ((active1 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 122, 9);
         else if ((active2 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 152;
            jjmatchedPos = 3;
         }
         else if ((active3 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(3, 215, 9);
         else if ((active3 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(3, 218, 9);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x100000000L, active2, 0xe000000L, active3, 0x4040000000L, active4, 0L, active5, 0L);
      case 101:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(3, 26, 9);
         else if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 27;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 51, 9);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 52, 9);
         else if ((active2 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(3, 151, 9);
         else if ((active3 & 0x1L) != 0L)
         {
            jjmatchedKind = 192;
            jjmatchedPos = 3;
         }
         else if ((active3 & 0x1000L) != 0L)
         {
            jjmatchedKind = 204;
            jjmatchedPos = 3;
         }
         else if ((active3 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(3, 223, 9);
         return jjMoveStringLiteralDfa4_0(active0, 0x70030001000L, active1, 0x800070040461a00L, active2, 0x100000600000800L, active3, 0x6006L, active4, 0L, active5, 0L);
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000800000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0x1800000000000000L, active1, 0x10400000000000L, active2, 0x1000000000004000L, active3, 0L, active4, 0L, active5, 0L);
      case 104:
         if ((active3 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 224;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8000000003000000L, active2, 0L, active3, 0x200000000L, active4, 0L, active5, 0L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000800003022000L, active1, 0x88002000000000L, active2, 0x10000000000016L, active3, 0x20000L, active4, 0L, active5, 0x20000000000000L);
      case 107:
         if ((active1 & 0x80000L) != 0L)
         {
            jjmatchedKind = 83;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 189, 9);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x100000L, active2, 0x180L, active3, 0x18000000L, active4, 0L, active5, 0L);
      case 108:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(3, 30, 9);
         else if ((active2 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(3, 131, 9);
         else if ((active2 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 157;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x800200000000L, active2, 0x8008200401e0000L, active3, 0x20000000L, active4, 0L, active5, 0L);
      case 109:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(3, 71, 9);
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000000L, active1, 0L, active2, 0x1000L, active3, 0L, active4, 0L, active5, 0L);
      case 110:
         if ((active1 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 3;
         }
         else if ((active3 & 0x8L) != 0L)
         {
            jjmatchedKind = 195;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000L, active1, 0x300000000100L, active2, 0x400000000000L, active3, 0x30L, active4, 0L, active5, 0L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x18000L, active1, 0xb0000400L, active2, 0x8060003010002000L, active3, 0x8400L, active4, 0L, active5, 0x10000000000000L);
      case 112:
         if ((active5 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(3, 233, 9);
         return jjMoveStringLiteralDfa4_0(active0, 0x8000400000000000L, active1, 0x100000000000007L, active2, 0x600000000008040L, active3, 0L, active4, 0L, active5, 0L);
      case 113:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x10000L, active4, 0L, active5, 0L);
      case 114:
         if ((active3 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(3, 227, 9);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x21000000000000L, active2, 0x180000000000L, active3, 0x80800L, active4, 0L, active5, 0L);
      case 115:
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(3, 34, 9);
         else if ((active1 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 125, 9);
         else if ((active2 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(3, 138, 9);
         else if ((active2 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 190, 9);
         return jjMoveStringLiteralDfa4_0(active0, 0x183100100000L, active1, 0x4018L, active2, 0x600000L, active3, 0L, active4, 0L, active5, 0L);
      case 116:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 49, 9);
         else if ((active3 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 216;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0xc000000000L, active1, 0x4400000060L, active2, 0x8000000010000L, active3, 0x2600000L, active4, 0L, active5, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000L, active1, 0x200001800000000L, active2, 0x80040800000000L, active3, 0L, active4, 0L, active5, 0L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x800000L, active2, 0x1000000000000L, active3, 0L, active4, 0L, active5, 0L);
      case 119:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x200000000000L, active3, 0L, active4, 0L, active5, 0L);
      case 120:
         if ((active4 & 0x100000000L) != 0L)
            return jjStopAtPos(3, 288);
         else if ((active4 & 0x1000000000L) != 0L)
            return jjStopAtPos(3, 292);
         break;
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, active2, active3, active4, active5);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(2, old0, old1, old2, old3, old4, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, active2, active3, active4, active5);
      return 4;
   }
   switch(curChar)
   {
      case 34:
         if ((active4 & 0x20L) != 0L)
            return jjStopAtPos(4, 261);
         break;
      case 45:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x10L, active5, 0L);
      case 48:
         if ((active2 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(4, 145, 9);
         else if ((active3 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(4, 219, 9);
         break;
      case 49:
         if ((active2 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(4, 146, 9);
         else if ((active3 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(4, 220, 9);
         break;
      case 80:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x2000000000L, active4, 0L, active5, 0L);
      case 95:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x300000000000L, active2, 0L, active3, 0x2002000L, active4, 0L, active5, 0L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x8040400000000000L, active1, 0x1004000820060L, active2, 0x20600000080L, active3, 0L, active4, 0L, active5, 0L);
      case 98:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 99:
         if ((active1 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 115, 9);
         else if ((active2 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 153;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x200L, active2, 0x80200004000000L, active3, 0x40000000L, active4, 0L, active5, 0L);
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000L, active1, 0x800002000000000L, active2, 0x80800L, active3, 0x4000L, active4, 0L, active5, 0L);
      case 101:
         if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(4, 80, 9);
         else if ((active1 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 110, 9);
         else if ((active2 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 176, 9);
         else if ((active2 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 187, 9);
         else if ((active3 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(4, 211, 9);
         else if ((active3 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(4, 221, 9);
         return jjMoveStringLiteralDfa5_0(active0, 0x800004000000000L, active1, 0x10L, active2, 0x1000440000618100L, active3, 0x800L, active4, 0L, active5, 0L);
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0x3000000L, active1, 0L, active2, 0x6L, active3, 0L, active4, 0L, active5, 0L);
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000002000L, active1, 0x10040000000L, active2, 0L, active3, 0x20000L, active4, 0L, active5, 0L);
      case 104:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x40000000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x8800000000L, active1, 0x10800500000000L, active2, 0xa000000001000L, active3, 0x200000030L, active4, 0L, active5, 0L);
      case 106:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x100000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 107:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(4, 22, 9);
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 108:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(4, 77, 9);
         else if ((active1 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 113;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 175, 9);
         return jjMoveStringLiteralDfa5_0(active0, 0x180000000000000L, active1, 0x204000000000000L, active2, 0x600000000000000L, active3, 0L, active4, 0L, active5, 0L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0xc000L, active1, 0L, active2, 0x200L, active3, 0L, active4, 0L, active5, 0L);
      case 110:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(4, 17, 9);
         else if ((active2 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 166;
            jjmatchedPos = 4;
         }
         else if ((active3 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(4, 207, 9);
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000000000L, active1, 0x10000800L, active2, 0x70018000000000L, active3, 0x200L, active4, 0L, active5, 0L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x4200000000100000L, active1, 0x8120000000000000L, active2, 0x10L, active3, 0x4000200000L, active4, 0L, active5, 0L);
      case 112:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x8L, active2, 0x4000000000000L, active3, 0x2L, active4, 0L, active5, 0L);
      case 114:
         if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 184, 9);
         else if ((active3 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(4, 202, 9);
         return jjMoveStringLiteralDfa5_0(active0, 0x1000060000011000L, active1, 0x600a0401407L, active2, 0x800006000L, active3, 0L, active4, 0L, active5, 0L);
      case 115:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(4, 6, 9);
         else if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(4, 32, 9);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 43, 9);
         else if ((active2 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(4, 156, 9);
         else if ((active2 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 164, 9);
         else if ((active2 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 165, 9);
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000000L, active1, 0L, active2, 0x8000000L, active3, 0L, active4, 0L, active5, 0L);
      case 116:
         if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(4, 72, 9);
         else if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(4, 99, 9);
         else if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 100, 9);
         else if ((active5 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 232, 1);
         else if ((active5 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 232, 1);
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000L, active1, 0x204000L, active2, 0x180040000000L, active3, 0L, active4, 0L, active5, 0L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x400200000000000L, active1, 0x80000200000000L, active2, 0x8000000000100040L, active3, 0x410004L, active4, 0L, active5, 0L);
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x40000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 120:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(4, 28, 9);
         break;
      case 121:
         return jjMoveStringLiteralDfa5_0(active0, 0x780L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 122:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(4, 29, 9);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x3000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, active2, active3, active4, active5);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(3, old0, old1, old2, old3, old4, old5); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, active2, active3, active4, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 48:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(5, 24, 9);
         else if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(5, 88, 9);
         else if ((active2 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(5, 129, 9);
         break;
      case 49:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(5, 25, 9);
         else if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(5, 89, 9);
         else if ((active2 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(5, 130, 9);
         break;
      case 67:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x10L);
      case 85:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x2000000000L, active4, 0L);
      case 95:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x4000L, active2, 0L, active3, 0L, active4, 0L);
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000008000L, active1, 0x100440400000L, active2, 0x4200004004000L, active3, 0x40400000L, active4, 0L);
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x20L, active2, 0L, active3, 0L, active4, 0L);
      case 99:
         if ((active2 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 179, 9);
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000000000L, active1, 0x20000L, active2, 0x10000L, active3, 0L, active4, 0L);
      case 100:
         if ((active2 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(5, 136, 9);
         else if ((active2 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 174, 9);
         else if ((active2 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 188, 9);
         else if ((active3 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(5, 201, 9);
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000000000L, active1, 0x200000800L, active2, 0L, active3, 0L, active4, 0L);
      case 101:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(5, 14, 9);
         else if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(5, 16, 9);
         else if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(5, 92, 9);
         else if ((active1 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 101, 9);
         else if ((active1 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 121, 9);
         else if ((active3 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(5, 208, 9);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x40010020040008L, active2, 0x8000200L, active3, 0x4000L, active4, 0L);
      case 102:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(5, 20, 9);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x20000000000L, active2, 0x2000000000000L, active3, 0x30L, active4, 0L);
      case 103:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(5, 35, 9);
         else if ((active2 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 180, 9);
         else if ((active3 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(5, 203, 9);
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000000L, active1, 0x800000000000000L, active2, 0x8060000000000880L, active3, 0L, active4, 0L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x100200000000L, active1, 0x200001L, active2, 0x98040002000L, active3, 0L, active4, 0L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x1200080000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 109:
         if ((active1 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 119, 9);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x20000000000000L, active2, 0L, active3, 0x4000000000L, active4, 0L);
      case 110:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(5, 13, 9);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 47, 9);
         else if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(5, 76, 9);
         else if ((active2 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(5, 132, 9);
         else if ((active2 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(5, 163, 9);
         else if ((active3 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(5, 225, 9);
         return jjMoveStringLiteralDfa6_0(active0, 0xe00008000000000L, active1, 0x10204000000000L, active2, 0x40000000000L, active3, 0x20004L, active4, 0L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x1100000000000000L, active1, 0x100006L, active2, 0x80000L, active3, 0x2002000L, active4, 0L);
      case 112:
         if ((active2 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(5, 148, 9);
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000000L, active1, 0x4000000000000L, active2, 0L, active3, 0L, active4, 0L);
      case 113:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x10L, active2, 0L, active3, 0L, active4, 0L);
      case 114:
         if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(5, 87, 9);
         else if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(5, 96, 9);
         return jjMoveStringLiteralDfa6_0(active0, 0x402000000000L, active1, 0x101000000000000L, active2, 0x120000008000L, active3, 0x200002L, active4, 0L);
      case 115:
         if ((active0 & 0x80L) != 0L)
         {
            jjmatchedKind = 7;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000000700L, active1, 0x840000000040L, active2, 0x200600000L, active3, 0L, active4, 0L);
      case 116:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(5, 12, 9);
         else if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(5, 73, 9);
         else if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(5, 74, 9);
         else if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(5, 95, 9);
         else if ((active2 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(5, 134, 9);
         else if ((active2 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(5, 162, 9);
         else if ((active2 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 183, 9);
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000000000L, active1, 0L, active2, 0x1000L, active3, 0L, active4, 0L);
      case 119:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x8000000000000000L, active2, 0L, active3, 0L, active4, 0L);
      case 120:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 121:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x600000000000000L, active3, 0L, active4, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, active2, active3, active4, 0L);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(4, old0, old1, old2, old3, old4, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, active2, active3, active4, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 34:
         if ((active4 & 0x10L) != 0L)
            return jjStopAtPos(6, 260);
         break;
      case 48:
         if ((active2 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 181, 9);
         else if ((active2 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 185, 9);
         else if ((active3 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(6, 196, 9);
         break;
      case 49:
         if ((active2 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 182, 9);
         else if ((active2 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 186, 9);
         else if ((active3 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(6, 197, 9);
         break;
      case 76:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x2000000000L, active4, 0L);
      case 95:
         return jjMoveStringLiteralDfa7_0(active0, 0x700L, active1, 0x20000000L, active2, 0L, active3, 0L, active4, 0L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x402000000000L, active1, 0x4020000000000L, active2, 0L, active3, 0L, active4, 0L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x500000000000000L, active1, 0x8000004000000008L, active2, 0x40000000000L, active3, 0L, active4, 0L);
      case 101:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(6, 31, 9);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 48, 9);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 54, 9);
         else if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(6, 97, 9);
         else if ((active1 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 123, 9);
         else if ((active2 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(6, 135, 9);
         else if ((active2 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(6, 139, 9);
         else if ((active2 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(6, 161, 9);
         return jjMoveStringLiteralDfa7_0(active0, 0x2800000000000000L, active1, 0x40000000000L, active2, 0x120000000000L, active3, 0x220002L, active4, 0L);
      case 102:
         if ((active3 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(6, 206, 9);
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000000000L, active1, 0L, active2, 0x18000000000L, active3, 0L, active4, 0L);
      case 103:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000000L, active1, 0x2L, active2, 0L, active3, 0L, active4, 0L);
      case 104:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(6, 81, 9);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x8000000000000000L, active3, 0L, active4, 0L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x100000L, active2, 0x1000L, active3, 0x4000000004L, active4, 0L);
      case 107:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(6, 70, 9);
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 108:
         if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(6, 98, 9);
         else if ((active3 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(6, 214, 9);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x40000020L, active2, 0L, active3, 0L, active4, 0L);
      case 109:
         if ((active2 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(6, 142, 9);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x4001L, active2, 0x40000000L, active3, 0L, active4, 0L);
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000L, active1, 0x100000000000L, active2, 0x280000000000L, active3, 0L, active4, 0L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000000L, active1, 0x20200000200000L, active2, 0L, active3, 0L, active4, 0L);
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x4L, active2, 0L, active3, 0x2000L, active4, 0L);
      case 113:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x8000000L, active3, 0L, active4, 0L);
      case 114:
         if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(6, 82, 9);
         else if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 104, 9);
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000000L, active1, 0L, active2, 0x4000000000000L, active3, 0x42000000L, active4, 0L);
      case 115:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(6, 75, 9);
         else if ((active1 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 118, 9);
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000000000L, active1, 0L, active2, 0x4000000L, active3, 0L, active4, 0L);
      case 116:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 38, 9);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 45, 9);
         else if ((active1 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 111, 9);
         else if ((active1 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 116, 9);
         else if ((active1 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 120, 9);
         return jjMoveStringLiteralDfa7_0(active0, 0x8000L, active1, 0x400000L, active2, 0x61a200L, active3, 0L, active4, 0L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x5000008000000000L, active1, 0x10L, active2, 0L, active3, 0L, active4, 0L);
      case 119:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x80000L, active3, 0L, active4, 0L);
      case 121:
         if ((active1 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 112, 9);
         else if ((active2 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 177, 9);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, active2, active3, active4, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(5, old0, old1, old2, old3, old4, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, active2, active3, 0L, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 48:
         if ((active2 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 167, 9);
         break;
      case 49:
         if ((active2 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 168, 9);
         break;
      case 83:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x2000000000L);
      case 95:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x40000000L, active2, 0L, active3, 0L);
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000000000000L, active1, 0x8000000000004000L, active2, 0x4100000000000L, active3, 0L);
      case 98:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x20000000L, active2, 0L, active3, 0L);
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x100L, active1, 0x60000000000L, active2, 0x200000000000L, active3, 0x2L);
      case 100:
         if ((active2 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 169, 9);
         else if ((active3 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(7, 209, 9);
         else if ((active3 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(7, 213, 9);
         else if ((active3 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(7, 222, 9);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x20000000000000L, active2, 0L, active3, 0x2000000L);
      case 101:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 39, 9);
         else if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(7, 69, 9);
         else if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(7, 86, 9);
         else if ((active1 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 102, 9);
         else if ((active2 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(7, 154, 9);
         else if ((active2 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(7, 158, 9);
         else if ((active2 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 170, 9);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x14L, active2, 0x10200L, active3, 0L);
      case 102:
         return jjMoveStringLiteralDfa8_0(active0, 0x200L, active1, 0L, active2, 0L, active3, 0L);
      case 103:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(7, 33, 9);
         break;
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x200042000008000L, active1, 0x9L, active2, 0L, active3, 0L);
      case 107:
         return jjMoveStringLiteralDfa8_0(active0, 0x100000000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000000000400L, active1, 0L, active2, 0L, active3, 0L);
      case 109:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 46, 9);
         break;
      case 110:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 44, 9);
         else if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(7, 84, 9);
         else if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(7, 85, 9);
         else if ((active2 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(7, 147, 9);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x200000000000L, active2, 0L, active3, 0L);
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x20000000000L, active1, 0L, active2, 0x8000000000000000L, active3, 0L);
      case 112:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 60, 9);
         break;
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x2800000000000000L, active1, 0x4000000000002L, active2, 0L, active3, 0L);
      case 115:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 55, 9);
         break;
      case 116:
         if ((active2 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 171, 9);
         else if ((active3 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(7, 194, 9);
         return jjMoveStringLiteralDfa8_0(active0, 0x400000000000000L, active1, 0L, active2, 0L, active3, 0x2000L);
      case 117:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x8000000L, active3, 0L);
      case 118:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x1000L, active3, 0L);
      case 121:
         if ((active1 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 108, 9);
         else if ((active2 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(7, 141, 9);
         else if ((active2 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(7, 143, 9);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x600000L, active3, 0L);
      case 122:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x4000000000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, active2, active3, 0L, 0L);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(6, old0, old1, old2, old3, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, active2, active3, 0L, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x2000000000L);
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x800000000000400L, active1, 0x4000000000002L, active2, 0L, active3, 0L);
      case 98:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x40000000L, active2, 0L, active3, 0L);
      case 99:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(8, 15, 9);
         break;
      case 100:
         if ((active2 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(8, 144, 9);
         break;
      case 101:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 62, 9);
         else if ((active1 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 105, 9);
         else if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 109, 9);
         else if ((active2 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(8, 140, 9);
         else if ((active3 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 230, 9);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x200008000000L, active3, 0x2000000L);
      case 102:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(8, 9, 9);
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000000000000L, active1, 0x8L, active2, 0L, active3, 0L);
      case 103:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 57, 9);
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x500000000000000L, active1, 0x20000000L, active2, 0L, active3, 0x2002L);
      case 108:
         if ((active2 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 172, 9);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x600000L, active3, 0L);
      case 109:
         if ((active2 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 178, 9);
         break;
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0x42000000000L, active1, 0x8000000000000010L, active2, 0L, active3, 0L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x100L, active1, 0L, active2, 0L, active3, 0L);
      case 114:
         if ((active2 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(8, 137, 9);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x4L, active2, 0L, active3, 0L);
      case 116:
         if ((active1 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 106, 9);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x4001L, active2, 0L, active3, 0L);
      case 117:
         return jjMoveStringLiteralDfa9_0(active0, 0x20000000000L, active1, 0x20000000000000L, active2, 0x8000000000000000L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, active2, active3, 0L, 0L);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(7, old0, old1, old2, old3, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1, active2, active3, 0L, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 36:
         if ((active3 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 229, 7);
         break;
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0x2000000000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 99:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x8000000000004010L, active2, 0L, active3, 0L);
      case 101:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 63, 9);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x600000L, active3, 0L);
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x40000001L, active2, 0L, active3, 0L);
      case 108:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x20000000000000L, active2, 0x200000000000L, active3, 0L);
      case 109:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(9, 65, 9);
         else if ((active1 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 114, 9);
         return jjMoveStringLiteralDfa10_0(active0, 0x100L, active1, 0L, active2, 0L, active3, 0L);
      case 110:
         return jjMoveStringLiteralDfa10_0(active0, 0x100000000000000L, active1, 0x20000000L, active2, 0x8000000L, active3, 0L);
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x400000000000000L, active1, 0L, active2, 0L, active3, 0x2000L);
      case 112:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 41, 9);
         break;
      case 114:
         if ((active3 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(9, 217, 9);
         break;
      case 115:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x2L);
      case 116:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 37, 9);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 42, 9);
         else if ((active2 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 191, 9);
         return jjMoveStringLiteralDfa10_0(active0, 0x800000000000400L, active1, 0x4L, active2, 0L, active3, 0L);
      case 121:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(9, 67, 9);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1, active2, active3, 0L, 0L);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(8, old0, old1, old2, old3, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1, active2, active3, 0L, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0x600000L, active3, 0L);
      case 98:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(10, 8, 9);
         break;
      case 99:
         return jjMoveStringLiteralDfa11_0(active0, 0x2000000000000400L, active1, 0L, active2, 0x8000000L, active3, 0L);
      case 101:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 59, 9);
         else if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(10, 68, 9);
         else if ((active1 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 117, 9);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x8000000000000000L, active2, 0L, active3, 0L);
      case 103:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 56, 9);
         break;
      case 104:
         if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(10, 78, 9);
         break;
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x2L);
      case 108:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0x200000000000L, active3, 0L);
      case 110:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 58, 9);
         else if ((active3 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(10, 205, 9);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x40000000L, active2, 0L, active3, 0L);
      case 115:
         if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(10, 93, 9);
         break;
      case 118:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x1L, active2, 0L, active3, 0L);
      case 121:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(10, 66, 9);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1, active2, active3, 0L, 0L);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(9, old0, old1, old2, old3, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1, active2, active3, 0L, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 61, 9);
         else if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(11, 64, 9);
         else if ((active2 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(11, 155, 9);
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0x200000000000L, active3, 0L);
      case 104:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(11, 10, 9);
         break;
      case 108:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x8000000000000000L, active2, 0L, active3, 0L);
      case 111:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0x600000L, active3, 0x2L);
      case 115:
         if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(11, 94, 9);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1, active2, active3, 0L, 0L);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(10, old0, old1, old2, old3, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, 0L, active1, active2, active3, 0L, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 100:
         if ((active2 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 173, 9);
         break;
      case 108:
         return jjMoveStringLiteralDfa13_0(active1, 0x8000000000000000L, active2, 0L, active3, 0L);
      case 110:
         if ((active3 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(12, 193, 9);
         return jjMoveStringLiteralDfa13_0(active1, 0L, active2, 0x600000L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_0(11, 0L, active1, active2, active3, 0L, 0L);
}
private int jjMoveStringLiteralDfa13_0(long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(11, 0L, old1, old2, old3, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, 0L, active1, active2, 0L, 0L, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 100:
         return jjMoveStringLiteralDfa14_0(active1, 0L, active2, 0x400000L);
      case 101:
         return jjMoveStringLiteralDfa14_0(active1, 0x8000000000000000L, active2, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_0(12, 0L, active1, active2, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa14_0(long old1, long active1, long old2, long active2)
{
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(12, 0L, old1, old2, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, 0L, active1, active2, 0L, 0L, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 100:
         if ((active1 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(14, 127, 9);
         break;
      case 101:
         return jjMoveStringLiteralDfa15_0(active1, 0L, active2, 0x400000L);
      case 118:
         return jjMoveStringLiteralDfa15_0(active1, 0L, active2, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_0(13, 0L, active1, active2, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa15_0(long old1, long active1, long old2, long active2)
{
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(13, 0L, old1, old2, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, 0L, 0L, active2, 0L, 0L, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa16_0(active2, 0x200000L);
      case 116:
         return jjMoveStringLiteralDfa16_0(active2, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_0(14, 0L, 0L, active2, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa16_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_0(14, 0L, 0L, old2, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, 0L, 0L, active2, 0L, 0L, 0L);
      return 16;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa17_0(active2, 0x400000L);
      case 110:
         return jjMoveStringLiteralDfa17_0(active2, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_0(15, 0L, 0L, active2, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa17_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_0(15, 0L, 0L, old2, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, 0L, 0L, active2, 0L, 0L, 0L);
      return 17;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa18_0(active2, 0x400000L);
      case 116:
         if ((active2 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(17, 149, 9);
         break;
      default :
         break;
   }
   return jjStartNfa_0(16, 0L, 0L, active2, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa18_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_0(16, 0L, 0L, old2, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, 0L, 0L, active2, 0L, 0L, 0L);
      return 18;
   }
   switch(curChar)
   {
      case 116:
         if ((active2 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(18, 150, 9);
         break;
      default :
         break;
   }
   return jjStartNfa_0(17, 0L, 0L, active2, 0L, 0L, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 9;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 240)
                        kind = 240;
                  }
                  else if (curChar == 36)
                     jjCheckNAdd(1);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 239)
                        kind = 239;
                  }
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 238)
                        kind = 238;
                  }
                  if ((0xff000000000000L & l) != 0L)
                  {
                     if (kind > 241)
                        kind = 241;
                  }
                  break;
               case 9:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 233)
                        kind = 233;
                     jjCheckNAdd(7);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 234)
                        kind = 234;
                     jjCheckNAdd(8);
                  }
                  break;
               case 1:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 232)
                     kind = 232;
                  jjCheckNAdd(1);
                  break;
               case 2:
                  if ((0x3fe000000000000L & l) != 0L && kind > 238)
                     kind = 238;
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) != 0L && kind > 239)
                     kind = 239;
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) != 0L && kind > 240)
                     kind = 240;
                  break;
               case 5:
                  if ((0xff000000000000L & l) != 0L && kind > 241)
                     kind = 241;
                  break;
               case 7:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 233)
                     kind = 233;
                  jjCheckNAdd(7);
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 234)
                     kind = 234;
                  jjCheckNAdd(8);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 233)
                        kind = 233;
                     jjCheckNAddTwoStates(7, 8);
                  }
                  if ((0x7e0000007eL & l) != 0L)
                  {
                     if (kind > 240)
                        kind = 240;
                  }
                  break;
               case 9:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 234)
                        kind = 234;
                     jjCheckNAdd(8);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 233)
                        kind = 233;
                     jjCheckNAdd(7);
                  }
                  break;
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 232)
                     kind = 232;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 4:
                  if ((0x7e0000007eL & l) != 0L && kind > 240)
                     kind = 240;
                  break;
               case 6:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 233)
                     kind = 233;
                  jjCheckNAddTwoStates(7, 8);
                  break;
               case 7:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 233)
                     kind = 233;
                  jjCheckNAdd(7);
                  break;
               case 8:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 234)
                     kind = 234;
                  jjCheckNAdd(8);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 9 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, "\141\154\151\141\163", 
"\141\154\167\141\171\163", "\141\154\167\141\171\163\137\143\157\155\142", 
"\141\154\167\141\171\163\137\146\146", "\141\154\167\141\171\163\137\154\141\164\143\150", "\141\156\144", 
"\141\163\163\145\162\164", "\141\163\163\151\147\156", "\141\163\163\165\155\145", 
"\141\165\164\157\155\141\164\151\143", "\142\145\146\157\162\145", "\142\145\147\151\156", "\142\151\156\144", 
"\142\151\156\163", "\142\151\156\163\157\146", "\142\151\164", "\142\162\145\141\153", 
"\142\165\146", "\142\165\146\151\146\60", "\142\165\146\151\146\61", "\142\171\164\145", 
"\143\141\163\145", "\143\141\163\145\170", "\143\141\163\145\172", "\143\145\154\154", 
"\143\150\141\156\144\154\145", "\143\154\141\163\163", "\143\154\157\143\153\151\156\147", 
"\143\155\157\163", "\143\157\156\146\151\147", "\143\157\156\163\164", 
"\143\157\156\163\164\162\141\151\156\164", "\143\157\156\164\145\170\164", "\143\157\156\164\151\156\165\145", 
"\143\157\166\145\162", "\143\157\166\145\162\147\162\157\165\160", 
"\143\157\166\145\162\160\157\151\156\164", "\143\162\157\163\163", "\144\145\141\163\163\151\147\156", 
"\144\145\146\141\165\154\164", "\144\145\146\160\141\162\141\155", "\144\145\163\151\147\156", 
"\144\151\163\141\142\154\145", "\144\151\163\164", "\144\157", "\145\144\147\145", "\145\154\163\145", 
"\145\156\144", "\145\156\144\143\141\163\145", "\145\156\144\143\154\141\163\163", 
"\145\156\144\143\154\157\143\153\151\156\147", "\145\156\144\143\157\156\146\151\147", 
"\145\156\144\146\165\156\143\164\151\157\156", "\145\156\144\147\145\156\145\162\141\164\145", 
"\145\156\144\147\162\157\165\160", "\145\156\144\151\156\164\145\162\146\141\143\145", 
"\145\156\144\155\157\144\165\154\145", "\145\156\144\160\141\143\153\141\147\145", 
"\145\156\144\160\162\151\155\151\164\151\166\145", "\145\156\144\160\162\157\147\162\141\155", 
"\145\156\144\160\162\157\160\145\162\164\171", "\145\156\144\163\160\145\143\151\146\171", 
"\145\156\144\163\145\161\165\145\156\143\145", "\145\156\144\164\141\142\154\145", "\145\156\144\164\141\163\153", 
"\145\156\165\155", "\145\166\145\156\164", "\145\170\160\145\143\164", 
"\145\170\160\157\162\164", "\145\170\164\145\156\144\163", "\145\170\164\145\162\156", 
"\146\151\156\141\154", "\146\151\162\163\164\137\155\141\164\143\150", "\146\157\162", 
"\146\157\162\143\145", "\146\157\162\145\141\143\150", "\146\157\162\145\166\145\162", 
"\146\157\162\153", "\146\157\162\153\152\157\151\156", "\146\165\156\143\164\151\157\156", 
"\147\145\156\145\162\141\164\145", "\147\145\156\166\141\162", "\150\151\147\150\172\60", 
"\150\151\147\150\172\61", "\151\146", "\151\146\146", "\151\146\156\157\156\145", 
"\151\147\156\157\162\145\137\142\151\156\163", "\151\154\154\145\147\141\154\137\142\151\156\163", 
"\151\155\160\157\162\164", "\151\156\143\144\151\162", "\151\156\143\154\165\144\145", 
"\151\156\151\164\151\141\154", "\151\156\157\165\164", "\151\156\160\165\164", "\151\156\163\151\144\145", 
"\151\156\163\164\141\156\143\145", "\151\156\164", "\151\156\164\145\147\145\162", 
"\151\156\164\145\162\146\141\143\145", "\151\156\164\145\162\163\145\143\164", "\152\157\151\156", 
"\152\157\151\156\137\141\156\171", "\152\157\151\156\137\156\157\156\145", "\154\141\162\147\145", 
"\154\151\142\154\151\163\164", "\154\151\142\162\141\162\171", "\154\157\143\141\154", 
"\154\157\143\141\154\160\141\162\141\155", "\154\157\147\151\143", "\154\157\156\147\151\156\164", 
"\155\141\143\162\157\155\157\144\165\154\145", "\155\141\164\143\150\145\163", "\155\145\144\151\165\155", 
"\155\157\144\160\157\162\164", "\155\157\144\165\154\145", "\156\141\156\144", 
"\156\145\147\145\144\147\145", "\156\145\167", "\156\155\157\163", "\156\157\162", 
"\156\157\163\150\157\167\143\141\156\143\145\154\154\145\144", "\156\157\164", "\156\157\164\151\146\60", "\156\157\164\151\146\61", 
"\156\165\154\154", "\157\160\164\151\157\156", "\157\162", "\157\165\164\160\165\164", 
"\160\141\143\153\141\147\145", "\160\141\143\153\145\144", "\160\141\162\141\155\145\164\145\162", 
"\160\155\157\163", "\160\157\163\145\144\147\145", "\160\162\151\155\151\164\151\166\145", 
"\160\162\151\157\162\151\164\171", "\160\162\157\147\162\141\155", "\160\162\157\160\145\162\164\171", 
"\160\162\157\164\145\143\164\145\144", "\160\165\154\154\60", "\160\165\154\154\61", 
"\160\165\154\154\144\157\167\156", "\160\165\154\154\165\160", 
"\160\165\154\163\145\163\164\171\154\145\137\157\156\145\166\145\156\164", 
"\160\165\154\163\145\163\164\171\154\145\137\157\156\144\145\164\145\143\164", "\160\165\162\145", "\162\141\156\144", "\162\141\156\144\143", 
"\162\141\156\144\143\141\163\145", "\162\141\156\144\163\145\161\165\145\156\143\145", "\162\143\155\157\163", 
"\162\145\141\154", "\162\145\141\154\164\151\155\145", "\162\145\146", "\162\145\147", 
"\162\145\154\145\141\163\145", "\162\145\160\145\141\164", "\162\145\164\165\162\156", 
"\162\156\155\157\163", "\162\160\155\157\163", "\162\164\162\141\156", 
"\162\164\162\141\156\151\146\60", "\162\164\162\141\156\151\146\61", "\163\143\141\154\141\162\145\144", 
"\163\145\161\165\145\156\143\145", "\163\150\157\162\164\151\156\164", "\163\150\157\162\164\162\145\141\154", 
"\163\150\157\167\143\141\156\143\145\154\154\145\144", "\163\151\147\156\145\144", "\163\155\141\154\154", "\163\157\154\166\145", 
"\163\160\145\143\151\146\171", "\163\160\145\143\160\141\162\141\155", "\163\164\141\164\151\143", 
"\163\164\162\151\156\147", "\163\164\162\157\156\147\60", "\163\164\162\157\156\147\61", 
"\163\164\162\165\143\164", "\163\165\160\145\162", "\163\165\160\160\154\171\60", 
"\163\165\160\160\154\171\61", "\164\141\142\154\145", "\164\141\147\147\145\144", "\164\141\163\153", 
"\164\150\151\163", "\164\150\162\157\165\147\150\157\165\164", "\164\151\155\145", 
"\164\151\155\145\160\162\145\143\151\163\151\157\156", "\164\151\155\145\165\156\151\164", "\164\162\141\156", 
"\164\162\141\156\151\146\60", "\164\162\141\156\151\146\61", "\164\162\151", "\164\162\151\60", 
"\164\162\151\61", "\164\162\151\141\156\144", "\164\162\151\157\162", 
"\164\162\151\162\145\147", "\164\171\160\145", "\164\171\160\145\137\157\160\164\151\157\156", 
"\164\171\160\145\144\145\146", "\165\156\151\157\156", "\165\156\151\161\165\145", 
"\165\156\163\151\147\156\145\144", "\165\163\145", "\165\167\151\162\145", "\166\141\162", 
"\166\145\143\164\157\162\145\144", "\166\151\162\164\165\141\154", "\166\157\151\144", "\167\141\151\164", 
"\167\141\151\164\137\157\162\144\145\162", "\167\141\156\144", "\167\145\141\153\60", "\167\145\141\153\61", 
"\167\150\151\154\145", "\167\151\154\144\143\141\162\144", "\167\151\162\145", "\167\151\164\150", 
"\167\151\164\150\151\156", "\167\157\162", "\170\156\157\162", "\170\157\162", 
"\120\101\124\110\120\125\114\123\105\44", "\162\141\156\144\157\155\151\172\145", "\73", null, null, null, "\50\52", 
"\52\51", "\134", null, null, null, null, "\72", "\50", "\56\52", "\51", "\43", "\54", 
"\56", "\173", "\175", "\75", "\u2013\76", "\72\75", "\72\57", "\72\72", "\52", 
"\133", "\135", "\44", "\42\104\120\111\55\103\42", "\42\104\120\111\42", "\53", 
"\53\53", "\u2013", "\u2013\u2013", "\52\52", "\57", "\45", "\75\75", "\41\75", "\74", 
"\74\75", "\76", "\76\75", "\174\55\76", "\174\75\76", "\43\43", "\133\52", "\133\75", 
"\133\55\76", "\100\100", "\75\76", "\41", "\46\46", "\174\174", "\61\u2019\142\60", 
"\61\u2019\142\61", "\61\u2019\142\170", "\61\u2019\142\130", "\61\u2019\102\60", 
"\61\u2019\102\61", "\61\u2019\102\170", "\61\u2019\102\130", "\61", "\60", "\55", "\170", "\130", 
"\77", "\142", "\102", "\162", "\122", "\146", "\106", "\160", "\120", "\156", 
"\116", "\53\75", "\55\75", "\52\75", "\57\75", "\45\75", "\46\75", "\174\75", 
"\136\75", "\74\74\75", "\76\76\75", "\74\74\74\75", "\76\76\76\75", "\100", "\100\52", 
"\55\76", "\55\76\76", "\46\46\46", "\u2019\173", "\47\173", "\47", "\174", "\52\76", 
"\76\76", "\74\74", "\53\72", "\55\72", "\163", "\155\163", "\165\163", "\156\163", 
"\160\163", "\146\163", "\163\164\145\160", "\176", "\46", "\176\46", "\176\174", "\136", 
"\176\136", "\136\176", "\75\75\75", "\41\75\75", "\75\75\77", "\41\75\77", "\76\76\76", 
"\74\74\74", "\55\55", "\137", "\145", "\105", "\u2019", "\123", "\144", "\104", "\157", 
"\117", "\150", "\110", "\172", "\132", "\47\60", "\47\61", "\44\162\157\157\164", 
"\44\165\156\151\164", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT", 
};
static final long[] jjtoToken = {
   0xffffffffffffffc1L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 
   0xffffffffffffffffL, 0x3fffffffffffffL, 
};
static final long[] jjtoSkip = {
   0x3eL, 0x0L, 0x0L, 0x0L, 
   0x0L, 0x0L, 
};
protected CharStream input_stream;
private final int[] jjrounds = new int[9];
private final int[] jjstateSet = new int[18];
protected char curChar;
/** Constructor. */
public SVParserTokenManager(CharStream stream){
   input_stream = stream;
}

/** Constructor. */
public SVParserTokenManager(CharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(CharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 9; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(CharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

}
